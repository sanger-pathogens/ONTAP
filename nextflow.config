// Config inheritance options
params {
    generic_config_base = "https://raw.githubusercontent.com/sanger-pathogens/nextflow-commons/"
    generic_config_version = "master"
    generic_config_url = ""
}
inherit_generic_config()

manifest {
    name            = 'long-read-ampliseq'
    author          = 'PAM Informatics'
    homePage        = 'https://gitlab.internal.sanger.ac.uk/sanger-pathogens/pipelines/long-read-ampliseq'
    description     = 'AmpliSeq analysis pipeline for STI and epidemic pathogens from long reads'
    mainScript      = 'main.nf'
    nextflowVersion = '>=21.04.0'
    version         = 'v0.0.1'
}

params {
    basecall = "true"
    raw_read_dir = "/data/pam/software/test_data_amplicon/all_fast5"
    basecalling_accuracy = "hac"
    basecall_model = "dna_r9.4.1_e8_hac@v3.3"
    //this is default anyways but allows for changing
    trim_adapters = "all"
    barcode_kit_name = ["EXP-NBD104", "EXP-NBD114"] //https://github.com/nanoporetech/dorado/issues/625
    read_format = "fastq"
    save_fastqs = true
    qc_reads = true
    min_qscore = 6
    clair3_model = "r941_prom_hac_g360+g422"

    reference = "/data/pam/team230/wr7/scratch/tmp/ampliseq_pipeline/NC_021508.1.fasta"
    target_regions_bed = "/data/pam/team216/mb29/scratch/Treponema/TP_Discriminatory_sites_2021/MinION_Lab_Testing/binding_sites/TP-Discriminatory-primers.design-ordered.amplicons-excl-primers.20240215.mod.bed"
    //TODO Check these!
    keep_sorted_bam = true
    keep_bam_files = false
    additional_metadata = "/data/pam/team230/wr7/scratch/tmp/ampliseq_pipeline/sample_to_barcode.csv"
    
    // LSF options
    queue_size = 50
    submit_rate_limit = '50/2min'
    monochrome_logs = false
}

// to add to nextflow.commons

process {
    withLabel:gpu {

        //forms the resource from other labels
        clusterOptions = { "-M "+task.memory.toMega()+" -R 'select[ngpus>0 && gmem>="+task.memory.toMega()+"] rusage[ngpus_physical=1.00,gmem="+task.memory.toMega()+"] span[ptile=1]' -gpu 'mode=shared'" }
        
        queue = { task.time > 48.h ? 'gpu-basement' : task.time > 12.h ? 'gpu-huge' : 'gpu-normal' }
        
        // need to set --nv to enable GPU's to be used
        containerOptions = {
            workflow.containerEngine == "singularity" ? '--containall --cleanenv --nv':
            ( workflow.containerEngine == "docker" ? '--gpus all': null )
        }
    }
}
// Helper functions
def inherit_generic_config() {
    config_url = params.generic_config_url ? params.generic_config_url : "${params.generic_config_base}/${params.generic_config_version}/configs/nextflow.config"
    try {
        includeConfig "${config_url}"
    } catch (Exception e) {
        System.err.println("ERROR: Could not load generic config: ${config_url}")
        System.err.println("Encountered the following exception:")
        throw e
    }
}
